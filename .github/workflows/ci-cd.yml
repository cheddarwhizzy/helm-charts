name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'charts/**'
      - '.github/workflows/**'
  push:
    branches: [ main ]
    paths:
      - 'charts/**'
      - '.github/workflows/**'

env:
  HELM_VERSION: "3.13.0"
  CHART_PATH: "charts/helm-base"

jobs:
  # Lint and test on pull requests
  lint-and-test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Lint Helm charts
      run: |
        helm lint ${{ env.CHART_PATH }}
        helm template test-release ${{ env.CHART_PATH }} --dry-run

    - name: Test chart rendering
      run: |
        # Test with default values
        helm template test-release ${{ env.CHART_PATH }} > /tmp/default.yaml
        echo "✅ Default values render successfully"
        
        # Test with example values if they exist
        if [ -f "${{ env.CHART_PATH }}/examples/node-app.yaml" ]; then
          helm template test-release ${{ env.CHART_PATH }} -f ${{ env.CHART_PATH }}/examples/node-app.yaml > /tmp/example.yaml
          echo "✅ Example values render successfully"
        fi
        
        # Test with different workload types
        helm template test-release ${{ env.CHART_PATH }} --set kind=StatefulSet > /tmp/statefulset.yaml
        helm template test-release ${{ env.CHART_PATH }} --set kind=Job > /tmp/job.yaml
        helm template test-release ${{ env.CHART_PATH }} --set kind=CronJob > /tmp/cronjob.yaml
        helm template test-release ${{ env.CHART_PATH }} --set kind=DaemonSet > /tmp/daemonset.yaml
        echo "✅ All workload types render successfully"

    - name: Validate Kubernetes manifests
      run: |
        # Install kubeval for validation
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        chmod +x kubeval
        sudo mv kubeval /usr/local/bin/
        
        # Validate rendered manifests
        helm template test-release ${{ env.CHART_PATH }} | kubeval --strict || true
        echo "✅ Kubernetes manifest validation completed"

    - name: Test VirtualService template
      run: |
        if [ -f "./test-virtualservice.sh" ]; then
          chmod +x ./test-virtualservice.sh
          ./test-virtualservice.sh
          echo "✅ VirtualService template test passed"
        fi

  # Deploy on merge to main
  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: []
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Auto-bump chart version
      run: |
        CHART_FILE="${{ env.CHART_PATH }}/Chart.yaml"
        CURRENT_VERSION=$(grep '^version:' $CHART_FILE | cut -d' ' -f2)
        echo "Current version: $CURRENT_VERSION"
        
        # Parse version components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        echo "New version: $NEW_VERSION"
        
        # Update Chart.yaml
        sed -i "s/^version: .*/version: $NEW_VERSION/" $CHART_FILE
        
        # Update appVersion if it matches the old version
        if grep -q "appVersion: $CURRENT_VERSION" $CHART_FILE; then
          sed -i "s/^appVersion: .*/appVersion: $NEW_VERSION/" $CHART_FILE
        fi
        
        echo "Updated Chart.yaml to version $NEW_VERSION"
        
        # Commit the version bump
        git add $CHART_FILE
        git commit -m "chore: bump chart version to $NEW_VERSION [skip ci]" || echo "No changes to commit"
        git push origin main || echo "Push failed or no changes"

    - name: Set up chart-releaser
      uses: helm/chart-releaser-action@v1.6.0
      with:
        config: cr.yaml

    - name: Run chart-releaser
      env:
        CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CR_OWNER: ${{ github.repository_owner }}
        CR_GIT_REPO: ${{ github.event.repository.name }}
        CR_PACKAGE_PATH: .cr-release-packages
        CR_GIT_BASE_URL: https://api.github.com/
        CR_GIT_UPLOAD_URL: https://uploads.github.com/
      run: |
        # Create packages directory
        mkdir -p .cr-release-packages
        
        # Package the chart
        helm package ${{ env.CHART_PATH }} -d .cr-release-packages
        
        # Update index
        cr index --config cr.yaml --owner ${{ github.repository_owner }} --git-repo ${{ github.event.repository.name }}

    - name: Upload chart packages
      uses: actions/upload-artifact@v3
      with:
        name: chart-packages
        path: .cr-release-packages/

    - name: Update GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .cr-release-packages
        destination_dir: .
        keep_files: true

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: helm-base-${{ steps.version.outputs.new_version }}
        release_name: helm-base ${{ steps.version.outputs.new_version }}
        body: |
          ## Changes
          - Automated release from main branch
          - Chart version: ${{ steps.version.outputs.new_version }}
          
          ## Installation
          ```bash
          helm repo add cheddarwhizzy https://cheddarwhizzy.github.io/helm-charts
          helm repo update
          helm install my-app cheddarwhizzy/helm-base
          ```
        draft: false
        prerelease: false

  # Security scanning
  security-scan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

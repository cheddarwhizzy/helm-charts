global:
  imagePullSecrets: []
  image:
    # repository: ""
    tag: latest
  configMaps: []
  secrets: []
  # dnsPolicy: "None"
  # dnsConfig: {}

nameOverride: 
fullnameOverride: 
replicaCount: 1
apiVersion: apps/v1
kind: Deployment # or StatefulSet

services: []
# - name: default
#   type: ClusterIP # NodePort or ExternalName
#   ports:
#   - name: gotty
#     port: 8080

statefulSet: {}
  # updateStrategy: OnDelete

# Optional Cronjobs to deploy with service
cronjobs: 
  image: {}
#     tag: latest
#     repository: account-service
  jobs: []
#     - name: cache-buyside-user-responsiveness
#       schedule: '0 19 * * *'
#       command: 
#         - python
#         - bin/cache_buyside_user_responsiveness.py

# Set these overrides in values.yaml

# Volumes for deployments. Must also specify in initContainers/containers below
volumes: []
# - name: some-volume
#   hostPath: 
#     path: /path/to/mount
# - name: some-configmap
#   configMap:
#     name: configmap-name
# - name: some-emptydir
#   emptyDir: {}
# - name: all-in-one
#   projected:
#     sources:
#     - secret:
#         name: mysecret
#         items:
#           - key: username
#             path: my-group/my-username
#     - secret:
#         name: mysecret2
#         items:
#           - key: password
#             path: my-group/my-password
#             mode: 511

# Config Maps to be mounted as env vars or files in the pods
configMaps: []
# - name: some-configmap
#   data:
#     config.json: |
#       {"apiUrl":"https://my.domain.com"}

# Secrets to be mounted as env vars or files in the pods
secrets: []
  # default:
  #   enabled: true
  #   mountPath: /secret-default
  #   annotations:
  #     test.secret.annotation: value
  #   labels:
  #     test_label: value
  #   env:
  #     SECRET_ENV_NAME: ENV_VALUE
  #   files:
  #     secret.test.txt: |-
  #       some text

secretStore:
  create: false # use default
  # fullname: aws-parameter-store # default ClusterSecretStore 
  # name: parameter-store
  service: ParameterStore
  region: us-west-2

externalSecrets: []
# - name: auth # Kubernetes Secret name to be created
#   data:
#     key: auth # key to be created in secret
#     value: calpass-rds-db-endpoint-dev # ssm-parameter value to be stored as value of key

# Service Account
serviceAccount:
  create: false
  # name: default # vault-auth
  annotations: {}

terminationGracePeriodSeconds: 30
image:
  tag: latest
  # repository: some.registry.com/my-image
imagePullSecrets: []
# - name: some-image-pull-secret

envFrom: {} # mount in additional configMap env vars
# - configMapRef:
#     name: special-config # or fullname: other-service-configmap
# - secretRef:
#     name: secret-config # or fullname: other-service-secrets
env: {}
  # BRANCH: integration

# affinity: |
#   podAntiAffinity:
#     requiredDuringSchedulingIgnoredDuringExecution:
#     - labelSelector:
#         matchExpressions:
#         - key: app
#           operator: In
#           values:
#           - {{ .Values.serviceName }}
#       topologyKey: "kubernetes.io/hostname"

tolerations: []
nodeSelector: {}
hostNetwork: false
hostAliases: []
commonAnnotations: {}
  # deployment_date: '{{ now | date "2006-01-02 15:04:05" }}'
progressDeadlineSeconds: 180
# minReadySeconds: 0
revisionHistoryLimit: 10
strategy:
  type: RollingUpdate
  maxUnavailable: 0
  maxSurge: 


storageclass:
  create: false
  provisioner: ""
  name: ""

initContainers: []
containers: []
# - name: some-thing
#   image: registry.domain.com/image:tag
#   command:
#   - sh
#   - -c
#   - |
#     echo hello
#     ./run_me.sh
#   volumeMounts:
#   - name: src
#     mountPath: /app
#   - name: some-configmap
#     mountPath: /etc/myapp

lifecycle: {}
  # postStart:
  #   exec:
  #     command: []
  # preStop:
  #   exec:
  #     command: ["/bin/sh","-c","nginx -s quit; while killall -0 nginx; do sleep 1; done"]


# Run on lifecycle
hookvolumes: []
preHooks: [] # Run as a hook, before "hooks" (e.g. Run additional hooks for values-staging.yaml but not QA's values.yaml)
hooks: []
postHooks: [] # Same as preHooks, but run after "hooks"
# - name: some-hook
#   onEvent: pre-install,pre-upgrade
#   weight: -5 # defaults to index (key) in the list of hooks
#   kind: Job # or ConfigMap
#   initContainers: [] # Job Only
#   containers: [] # Job Only
#   volumes: [] # applied to job spec

# Role based access control. Requires a serviceaccount
rbac:
  create: false
  type: "" # default Role or "cluster" for ClusterRole
  rules: []
  # - apiGroups: [""]
  #   resources: ["pods", "pods/exec", "pods/log"]
  #   verbs: ["*"]


hpa:
  apiVersion: autoscaling/v2beta2
  enabled: false
  kind: Deployment # or 'StatefulSet'
  minReplicaCount: 1
  maxReplicaCount: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 80
  - type: Resource
    resource:
      name: memory
      targetAverageValue: 75
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
  # - type: Pods
  #   pods:
  #     metricName: http_requests
  #     targetAverageValue: 10

podDisruptionBudget: 
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

networkPolicy:
  enabled: false
  policy: |
    podSelector: {}
    policyTypes:
    - Ingress
    ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            nginx: "true"


ingress:
  enabled: false
  secretName: 
  subdomain: 
  domain: 
  class: nginx # or 'haproxy'
  annotations: {}
    # external-dns.alpha.kubernetes.io/target: nginx.lb.domain.com
    # external-dns.alpha.kubernetes.io/ttl: "60"
    # cert-manager.io/cluster-issuer: letsencrypt-prod-http
    # certmanager.k8s.io/cluster-issuer: letsencrypt-prod-http
    # prometheus.io/probe: "true"
    # ingress.kubernetes.io/cors-enable: "true"
    # ingress.kubernetes.io/config-backend: |
    #   acl network_allowed src 10.0.0.0/16 172.254.199.202 38.142.252.242 71.183.39.85
    #   http-request deny if !network_allowed
  routes: []
  # - name: default
  #   host: "{{ .Values.ingress.subdomain }}.{{ .Values.ingress.domain }}"
  #   port: 3000
  #   path: /
  aliases: []
  tls: false
  # privateIngressRules: |
  #   acl network_allowed src 10.0.0.0/16 172.254.199.202 38.142.252.242 71.183.39.85
  #   http-request deny if !network_allowed


  # Ingress route multiHostCorsEnabled domains
  corsAllowedDomains:
  # - "some.domain.com"
  # - "www.google.com"
  # - "localhost:3000"
  haproxyCorsTemplate: |
    allow some host
  nginxCorsTemplate: |
    if ($http_origin ~* (^https?://([^/]+\.)*({{ $.Values.ingress.corsAllowedDomains | join "|" }}))) {
        set $cors "true";
    }
    if ($request_method = 'OPTIONS') {
      set $cors "${cors}options";
    }
    if ($cors = 'trueoptions') {
      more_set_headers 'Access-Control-Allow-Origin: $http_origin';
      more_set_headers 'Access-Control-Allow-Credentials: true';
      more_set_headers 'Access-Control-Allow-Methods: GET, POST, PATCH, PUT, DELETE, OPTIONS';
      more_set_headers 'Access-Control-Allow-Headers: Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since,Pragma,Expires';
      more_set_headers 'Access-Control-Max-Age: 1728000';
      more_set_headers 'Content-Type: text/plain charset=UTF-8';
      more_set_headers 'Content-Length: 0';
      return 204;
    }
    if ($cors = "true") {
      more_set_headers 'Access-Control-Allow-Origin: $http_origin';
      more_set_headers 'Access-Control-Allow-Credentials: true';
      more_set_headers 'Access-Control-Allow-Methods: GET, POST, PATCH, PUT, DELETE, OPTIONS';
      more_set_headers 'Access-Control-Allow-Headers: Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since,Pragma,Expires';
    }

  routes: []
  # - name: default
  #   path: /
  #   host: '{{ required "You must provide .Values.ingress.subdomain" .Values.ingress.subdomain }}.{{ required "You must provide .Values.ingress.domain" .Values.ingress.domain }}'
  #   # annotations:
  #   port: 4000

  # dnsPolicy: "None"
  # dnsConfig:
  #   nameservers: []
  #     # - 1.2.3.4
  #   searches: []
  #     # - ns1.svc.cluster-domain.example
  #     # - my.dns.search.suffix
  #   options: []
  #     # - name: ndots
  #     #   value: "2"
  #     # - name: edns0

# Not Implemented
psp:
  enabled: false

# Not Implemented
mutatingWebhookConfiguration:
  enabled: false

# Not Implemented
validatingWebhookConfiguration:
  enabled: false

# Not Implemented
crds:
  enabled: false
  # crds:
  # - name: some-crd
  #   spec:
  #   ...
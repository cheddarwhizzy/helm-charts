{{- $root := . -}}
{{- $name := include "helm-base.fullname" . }}
{{- $commonLabels := include "helm-base.commonLabels" . }}
{{- $commonAnnotations := include "helm-base.commonAnnotations" . }}
{{- $externalSecrets := deepCopy .Values.externalSecrets | mergeOverwrite (deepCopy .Values.global.externalSecrets) -}}

{{- range $key, $values := $externalSecrets }}
{{- $secretStoreName := coalesce "aws-parameter-store" (printf "%s-%s" $name $root.Values.secretStore.name) $root.Values.secretStore.fullname }}
{{- $name := default (printf "%s-%s" $name $key) $values.fullname }}
---
apiVersion: external-secrets.io/v1alpha1
kind: ExternalSecret
metadata:
  name: {{ $name }}
  labels:
{{- $commonLabels | nindent 4 }}
  {{- if $commonAnnotations }}
  annotations:
{{- $commonAnnotations | nindent 4 }}
  {{- end }}
spec:
  refreshInterval: {{ default "1h" $values.refreshInterval }}
  secretStoreRef:
    name: {{ $secretStoreName }}
    kind: ClusterSecretStore
  target:
    name: {{ $name }} # name of kubernetes secret to create
    creationPolicy: Owner
    template:
      data:
{{- range $esKey, $esVal := $values.data }}
        {{ $esKey }}: '{{`{{ .`}}{{ $esKey }}{{` | toString }}`}}' # put '{{ $esKey }}' temp key into the secret at '{{ $esKey }}'
{{- end }}
  data:
{{- range $esKey, $esVal := $values.data }}
  - secretKey: {{ $esKey }} # load parameter into '{{ $esKey }}' temp key
    remoteRef:
      key: {{ tpl $esVal $root }}
{{- end }}

{{- end }} {{/* end range c */}}

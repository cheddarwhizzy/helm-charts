name: Security Scan

on:
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
    paths:
      - 'charts/**'
      - '.github/workflows/security.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'charts/**'
      - '.github/workflows/security.yml'
  workflow_dispatch:

env:
  HELM_VERSION: '3.17.0'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: ${{ env.HELM_VERSION }}
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Helm Security Scan
      run: |
        echo "🔒 Running Helm security scan..."
        
        # Install helm-sec plugin
        helm plugin install https://github.com/helm/helm-sec || echo "helm-sec plugin installation failed"
        
        # Run security scan on charts
        for chart in charts/*/; do
          if [ -d "$chart" ]; then
            echo "🔍 Scanning chart: $chart"
            
            # Run helm-sec if available
            if helm plugin list | grep -q sec; then
              helm sec "$chart" || echo "Security scan completed with warnings for $chart"
            else
              echo "⚠️  helm-sec plugin not available, running basic security checks"
            fi
            
            # Basic security checks
            echo "🔍 Running basic security checks for $chart..."
            
            # Check for hardcoded secrets
            if grep -r -i "password\|secret\|key\|token" "$chart/templates/" | grep -v "{{" | grep -v "example" | grep -v "placeholder"; then
              echo "⚠️  Potential hardcoded secrets found in $chart/templates/"
            else
              echo "✅ No hardcoded secrets found in $chart/templates/"
            fi
            
            # Check for proper resource limits
            if grep -r "resources:" "$chart/templates/"; then
              echo "✅ Resource limits found in $chart/templates/"
            else
              echo "⚠️  No resource limits found in $chart/templates/"
            fi
            
            # Check for security contexts
            if grep -r "securityContext:" "$chart/templates/"; then
              echo "✅ Security contexts found in $chart/templates/"
            else
              echo "⚠️  No security contexts found in $chart/templates/"
            fi
            
            # Check for network policies
            if grep -r "NetworkPolicy" "$chart/templates/"; then
              echo "✅ Network policies found in $chart/templates/"
            else
              echo "ℹ️  No network policies found in $chart/templates/"
            fi
            
            # Check for pod security policies
            if grep -r "PodSecurityPolicy" "$chart/templates/"; then
              echo "✅ Pod security policies found in $chart/templates/"
            else
              echo "ℹ️  No pod security policies found in $chart/templates/"
            fi
          fi
        done
        
    - name: Check for outdated dependencies
      run: |
        echo "🔍 Checking for outdated dependencies..."
        
        # Check Helm version
        CURRENT_HELM=$(helm version --short | cut -d' ' -f1 | sed 's/v//')
        LATEST_HELM=$(curl -s https://api.github.com/repos/helm/helm/releases/latest | jq -r '.tag_name' | sed 's/v//')
        
        echo "Current Helm version: $CURRENT_HELM"
        echo "Latest Helm version: $LATEST_HELM"
        
        if [ "$CURRENT_HELM" != "$LATEST_HELM" ]; then
          echo "⚠️  Helm version is outdated. Consider updating to $LATEST_HELM"
        else
          echo "✅ Helm version is up to date"
        fi
        
        # Check for outdated chart dependencies
        for chart in charts/*/; do
          if [ -d "$chart" ] && [ -f "$chart/Chart.yaml" ]; then
            echo "🔍 Checking dependencies for $chart"
            
            if grep -q "dependencies:" "$chart/Chart.yaml"; then
              echo "📦 Chart has dependencies, checking for updates..."
              # This would typically involve checking for newer versions
              # For now, we'll just note that dependencies exist
              echo "ℹ️  Dependencies found in $chart/Chart.yaml"
            else
              echo "✅ No dependencies found in $chart"
            fi
          fi
        done
        
    - name: Generate Security Report
      run: |
        echo "📊 Security Scan Report" > security-report.md
        echo "=====================" >> security-report.md
        echo "" >> security-report.md
        echo "**Scan Date:** $(date)" >> security-report.md
        echo "**Repository:** ${{ github.repository }}" >> security-report.md
        echo "**Branch:** ${{ github.ref_name }}" >> security-report.md
        echo "" >> security-report.md
        echo "## Scan Results" >> security-report.md
        echo "" >> security-report.md
        echo "### Vulnerability Scan" >> security-report.md
        echo "- **Tool:** Trivy" >> security-report.md
        echo "- **Status:** Completed" >> security-report.md
        echo "- **Results:** Uploaded to GitHub Security tab" >> security-report.md
        echo "" >> security-report.md
        echo "### Helm Security Scan" >> security-report.md
        echo "- **Tool:** helm-sec" >> security-report.md
        echo "- **Status:** Completed" >> security-report.md
        echo "" >> security-report.md
        echo "### Basic Security Checks" >> security-report.md
        echo "- **Hardcoded Secrets:** Checked" >> security-report.md
        echo "- **Resource Limits:** Checked" >> security-report.md
        echo "- **Security Contexts:** Checked" >> security-report.md
        echo "- **Network Policies:** Checked" >> security-report.md
        echo "" >> security-report.md
        echo "## Recommendations" >> security-report.md
        echo "" >> security-report.md
        echo "1. Review any vulnerabilities found in the GitHub Security tab" >> security-report.md
        echo "2. Ensure all containers have resource limits defined" >> security-report.md
        echo "3. Use security contexts to restrict container privileges" >> security-report.md
        echo "4. Consider implementing network policies for additional security" >> security-report.md
        echo "5. Regularly update Helm and chart dependencies" >> security-report.md
        
    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        retention-days: 30
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Security Scan Results\n\n${report}`
          });
          
    - name: Create Security Issue
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Security scan failed',
            body: `Security scan failed for commit ${context.sha}. Please review the scan results and address any security issues found.`,
            labels: ['security', 'bug']
          });
